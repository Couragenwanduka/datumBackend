generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  Present
  Absent
  Late
}

enum Term {
  FirstTerm
  SecondTerm
  ThirdTerm
}

enum ClassDivision {
  Purity
  Peace
  Love
  Wisdom
  Joy
}

enum ClassLevel {
  JuniorSecondarySchool
  SeniorSecondarySchool
}

enum StudentStatus {
  Active
  Transferred
  Expelled
  Graduated
  Other
}

enum Gender {
  Male
  Female
}

enum Role {
  Admin
  Teacher
}

model Parent {
  id           Int       @id
  surName      String
  firstName    String
  otherName    String
  email        String    @unique
  password     String
  phoneNumber  String    @unique
  relationship String
  students     Student[] @relation("StudentParent")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Tier {
  id              Int               @id @default(autoincrement())
  teir            ClassDivision
  classLevel      ClassLevel
  classId         Int
  class           ClassTable        @relation("ClassToTier", fields: [classId], references: [id], onDelete: Cascade)
  students        Student[]         @relation("StudentTier")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ClassEnrollment ClassEnrollment[]
}

model ClassTable {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  classTier       Tier[]            @relation("ClassToTier")
  students        Student[]         @relation("ClassToStudents")
  timetables      Timetable[]       @relation("ClassTimetable")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ClassEnrollment ClassEnrollment[]
}

model Alumina {
  id             Int      @id @default(autoincrement())
  studentId      Int      @unique
  student        Student  @relation(fields: [studentId], references: [id])
  graduationYear Int
  currentStatus  String // Example: Employed, Further Studies, etc.
  updatedAt      DateTime @default(now()) @updatedAt
}

model ClassEnrollment {
  id           Int        @id @default(autoincrement())
  studentId    Int
  classId      Int
  tierId       Int
  academicYear String // e.g., "2019/2020"
  startDate    DateTime   @default(now())
  endDate      DateTime?
  student      Student    @relation(fields: [studentId], references: [id])
  class        ClassTable @relation(fields: [classId], references: [id], onDelete: Cascade)
  tier         Tier       @relation(fields: [tierId], references: [id], onDelete: Cascade)
}

model Student {
  id               Int               @id @default(autoincrement())
  surName          String
  firstName        String
  otherName        String
  classId          Int
  tierId           Int
  class            ClassTable        @relation("ClassToStudents", fields: [classId], references: [id], onDelete: Cascade)
  tier             Tier              @relation("StudentTier", fields: [tierId], references: [id])
  dateOfBirth      DateTime
  bloodGroup       String
  gender           Gender
  nationality      String
  stateOfOrigin    String
  localGovernment  String
  address          String
  enrollmentDate   DateTime          @default(now())
  picture          String
  previousSchool   String
  parentEmail      String
  parent           Parent            @relation("StudentParent", fields: [parentEmail], references: [email])
  results          Result[]          @relation("StudentResult")
  attendance       Attendance[]      @relation("StudentAttendance")
  remarks          Remarks[]         @relation("StudentRemarks")
  alumina          Alumina?          // Optional relation to Alumina model
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  status           StudentStatus     @default(Active)
  statusReason     String?
  statusChangeDate DateTime?
  enrollments      ClassEnrollment[]
}

model Administrator {
  id              Int          @id @default(autoincrement())
  surName         String
  firstName       String
  otherName       String
  gender          Gender
  bloodGroup      String
  dateOfBirth     DateTime
  nationality     String
  email           String       @unique
  password        String
  phoneNumber     String       @unique
  address         String
  stateOfOrigin   String
  localGovernment String
  employmentRole  String
  employmentDate  DateTime     @default(now())
  qualification   String
  picture         String
  role            Role         @default(Teacher)
  gradeLevel      String       @default("levelOne")
  step            String       @default("stepOne")
  results         Result[]     @relation("ResultTeacher")
  timetables      Timetable[]  @relation("TimetableTeacher")
  attendance      Attendance[] @relation("Teacher")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Result {
  id          Int           @id @default(autoincrement())
  studentId   Int
  surName     String
  firstName   String
  otherName   String
  subject     String
  class       String
  term        Term
  test        String
  assignment  String
  midTermTest String
  exam        String
  total       String
  average     String
  position    String
  grade       String
  teacherId   Int
  teacher     Administrator @relation("ResultTeacher", fields: [teacherId], references: [id])
  student     Student       @relation("StudentResult", fields: [studentId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Attendance {
  id        Int           @id @default(autoincrement())
  date      DateTime      @default(now())
  dayOfWeek String        @default("Monday")
  time      String        @default("00:00")
  teacherId Int
  class     String        @default("DefaultClass")
  classTier ClassDivision @default(Purity)
  status    Status
  studentId Int
  student   Student       @relation("StudentAttendance", fields: [studentId], references: [id])
  teacher   Administrator @relation("Teacher", fields: [teacherId], references: [id])
  createdAt DateTime      @default(now())
}

model Timetable {
  id        Int           @id @default(autoincrement())
  dayOfWeek String
  startTime DateTime
  endTime   DateTime
  classId   Int
  class     ClassTable    @relation("ClassTimetable", fields: [classId], references: [id])
  classTier ClassDivision
  subject   String
  teacherId Int
  teacher   Administrator @relation("TimetableTeacher", fields: [teacherId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model SchemeOfWork {
  id         Int      @id @default(autoincrement())
  subject    String
  class      String
  term       Term
  topics     Topic[]  @relation("SchemeTopics")
  objectives String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Topic {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  week         Int
  schemeId     Int
  schemeOfWork SchemeOfWork @relation("SchemeTopics", fields: [schemeId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Activities {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
}

model Remarks {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Student  @relation("StudentRemarks", fields: [studentId], references: [id])
  remark    String
  class     String
  term      Term
  subject   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id         Int        @id @default(autoincrement())
  name       String
  classLevel ClassLevel
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  studentId Int
  feedback  String
  class     String
  term      Term
  subject   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
